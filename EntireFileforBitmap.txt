package com.example.ccox04.hokiepaints;

import android.Manifest;
import android.content.pm.PackageManager;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Point;
import android.net.Uri;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;



import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Objects;
import java.util.Random;

/*
* Name:        Chris Cox
* Class:       CS 3714
* Due Date:    4/23/17
* Assignment:  HW_6
* Description: Create and build your own local version of SnapChat.  In this I use canvas, bitmaps,
*               camera, onTouchListener, and multi-touch Gestures.  In this application a user
*               takes a picture then they can draw on the high resolution image and also add icon
*               images to the picture.  I used https://developer.android.com/training/camera/photobasics.html
*               to handle converting bitmap to high resolution image.  Then I had to rotate the bitmap in a
*               matrix in order for the image to show up full screen and be full resolution.
* File: PictureEditActivity.java
*
*/

public class PictureEditActivity extends AppCompatActivity {
    private static final String TAG = PictureEditActivity.class.getSimpleName(); // For Debugging

    MyCanvas myCanvas;
    TouchHandler touchhandler;

    // All of the following are for handling images
    static final int REQUEST_IMAGE = 1;
    static final int LOGO_SELECT = 0;
    static final int HELMET_SELECT = 1;

    static final int HELMET_WIDTH = 48;
    static final int HELMET_HEIGHT = 48;
    static final int LOGO_WIDTH = 60;
    static final int LOGO_HEIGHT = 29;
    static final int IMAGE_ROTATION = 270;
    int layoutHeight, layoutWidth;
    ImageView helmetImageView, logoImageView;
    String mCurrentPhotoPath;
    BitmapDrawable pictureDrawable;

    Bitmap rotatedBitmap;

    // This array holds all of the current views im adding(icons)
    ArrayList<View> currentViewsArray = new ArrayList<>();

    // This array holds the current order of what was add, either path or icon
    // Interger codes are added as such: 0 = path(drawing); 1 = icon(image)
    ArrayList<Integer> currentOrderArray = new ArrayList<>();

    static final int PATH_ORDER = 0;
    static final int ICON_ORDER = 1;

    static final String CURRENT_PATHID = "current pathID";
    static final String CURRENT_ORDER_ARRAYLIST = "current order arrayList";
    static final String CURRENT_PHOTO_PATH = "current photo path";
    static final String CURRENT_DISPLAY_HEIGHT = "current display height";
    static final String CURRENT_DISPLAY_WIDTH = "current display width";
    static final String CURRENT_FINGERID = "current fingerID";


    private int pathID;
    private int fingerID;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_picture_edit);
        myCanvas = (MyCanvas) findViewById(R.id.myCanvas);
        pathID = 0;
        fingerID = 0;
        touchhandler = new TouchHandler(this);
        // This is to get the current display dimensions in order for the picture to properly fit the canvas
        Display display = getWindowManager().getDefaultDisplay();
        Point dimension = new Point();
        display.getSize(dimension);
        layoutWidth = dimension.x;
        layoutHeight = dimension.y;
        myCanvas.setOnTouchListener(touchhandler);
        // This gets the call from the previous activity to snap a picture
        Intent getMainIntent = getIntent();
        if(getMainIntent.hasExtra(MainActivity.EDIT_PICTURE)) {
            dispatchTakePictureIntent();
        }
    }

    // This creates an image file. Directly from Android Studio; Link is in description
    private File createImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,  /* prefix */
                ".jpg",         /* suffix */
                storageDir      /* directory */
        );

        // Save a file: path for use with ACTION_VIEW intents
        mCurrentPhotoPath = image.getAbsolutePath();
        return image;
    }

    // This starts an intent to take a picture. Directly from Android Studio; Link is in description
    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        // Ensure that there's a camera activity to handle the intent
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            // Create the File where the photo should go
            File photoFile = null;
            try {
                photoFile = createImageFile();
            } catch (IOException ex) {
                // Error occurred while creating the File
                showShrtToast("Error creating file.");
            }
            // Continue only if the File was successfully created
            if (photoFile != null) {
                Uri photoURI = FileProvider.getUriForFile(this,
                        "com.example.ccox04.hokiepaints.fileprovider",
                        photoFile);
                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(takePictureIntent, REQUEST_IMAGE);
            }
        }
    }

    // This is used to update the unique path ID contained in MyCanvas Object
    public void updatePathID(int inc){
        myCanvas.updatePathID(inc);
    }

    // This is used to add a new path to the MyCanvas Object
    public void addNewPath(int id, float x, float y) {
        pathID = id;
        fingerID = id;
        myCanvas.addPath(id, x, y);
        currentOrderArray.add(PATH_ORDER);
    }

    // This is used to update a path to the MyCanvas Object
    public void updatePath(int id, float x, float y) {
        pathID = id;
        fingerID = id;
        myCanvas.updatePath(id, x, y);
    }

    // This is used to add a icon to the current picture image
    // Create new layout parameters and then add to the original layout
    public void onDoubleTap(int id, float x, float y) {
        pathID = id;
        fingerID = id;
        final FrameLayout editLayout = (FrameLayout)findViewById(R.id.frameLayoutPicture);
        myCanvas.addIcon(id, x, y, LOGO_SELECT);
        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        logoImageView = new ImageView(getApplicationContext());
        layoutParams.setMargins(((int) x - (LOGO_WIDTH/2)), ((int) y - (LOGO_HEIGHT/2)), 0 , 0);
        logoImageView.setLayoutParams(layoutParams);
        logoImageView.setImageResource(R.drawable.logo3);
        currentViewsArray.add(logoImageView);
        currentOrderArray.add(ICON_ORDER);
        myCanvas.removePath(id);
        editLayout.addView(logoImageView);
    }

    // This is used to add a icon to the current picture image
    // Create new layout parameters and then add to the original layout
    public void onLongPress(int id, float x, float y) {
        pathID = id;
        fingerID = id;
        final FrameLayout editLayout = (FrameLayout)findViewById(R.id.frameLayoutPicture);
        myCanvas.addIcon(id, x, y, HELMET_SELECT);
        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        helmetImageView = new ImageView(getApplicationContext());
        layoutParams.setMargins(((int) x - (HELMET_WIDTH/2)), ((int) y - (HELMET_HEIGHT/2)), 0 , 0);
        helmetImageView.setLayoutParams(layoutParams);
        helmetImageView.setImageResource(R.drawable.helmet3);
        currentViewsArray.add(helmetImageView);
        currentOrderArray.add(ICON_ORDER);
        myCanvas.removePath(id);
        editLayout.addView(helmetImageView);
    }

    // This grabs the picture that is saved and upscales to full resolution.
    // Then it rotates the image accordingly. Directly from Android Studio; Link is in description
    private void setPic() {
        // Get the dimensions of the View
        int targetW = layoutWidth;
        int targetH = layoutHeight;

        // Get the dimensions of the bitmap
        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
        bmOptions.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);

        int photoW = bmOptions.outWidth;
        int photoH = bmOptions.outHeight;

        // Determine how much to scale down the image
        int scaleFactor = Math.min(photoW/targetW, photoH/targetH);

        // Decode the image file into a Bitmap sized to fill the View
        bmOptions.inJustDecodeBounds = false;
        bmOptions.inSampleSize = scaleFactor;
        bmOptions.inPurgeable = true;

        // This is to get the image and then rotate the image while still keeping its full size
        Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);
        Matrix matrix = new Matrix();
        matrix.postRotate(IMAGE_ROTATION);
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap,layoutWidth,layoutHeight,true);
        rotatedBitmap = Bitmap.createBitmap(scaledBitmap , 0, 0, scaledBitmap .getWidth(), scaledBitmap .getHeight(), matrix, true);
        pictureDrawable = new BitmapDrawable(getResources(), rotatedBitmap);
        myCanvas.setBackground(pictureDrawable);
    }

    // Waiting on the camera to take a picture. Then I will get the file and roatate the image
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_IMAGE && resultCode == RESULT_OK) {
            setPic();
        }
    }

    /*
    The Following functions are for handling button presses on the main screen
    // This sets the color of the brush stroke
    // RED   = 0
    // BLUE  = 1
    // GREEN = 2
     */
    public void redOnClick(View view){
        myCanvas.setBrushColor(0);
    }

    public void blueOnClick(View view){
        myCanvas.setBrushColor(1);
    }

    public void greenOnClick(View view){
        myCanvas.setBrushColor(2);
    }

    // This means the user wants to take another picture
    public void doneOnClick(View view){
        clearCurrentArrays(); // Clearing current arrays
        Intent goToMainActivity = new Intent();
        goToMainActivity.putExtra("PictureDone", "Completed");
        setResult(RESULT_OK, goToMainActivity);
        finish();
    }

    // User wants to remove last action
    public void undoOnClick(View view){
        removeLastDrawn();
    }

    // User wants to clear the entire image
    public void clearOnClick(View view){
        pathID = 0;
        fingerID = 0;
        myCanvas.removeAllPathsIcons();
        myCanvas.setBackground(pictureDrawable);
        clearCurrentViewsArray();
        clearCurrentArrays();
    }

    public void showShrtToast(String toastString){
        Toast.makeText(this, toastString, Toast.LENGTH_SHORT).show();
    }

    public void showLongToast(String toastString){
        Toast.makeText(this, toastString, Toast.LENGTH_LONG).show();
    }

    // This is a wrapper function to clear all local arrays
    private void clearCurrentArrays(){
        currentOrderArray.clear();
        currentViewsArray.clear();
    }

    // This is a wrapper function to clear current icons
    private void clearCurrentViewsArray(){
        for(int i = 0; i < currentViewsArray.size(); i++){
            View remove_view = currentViewsArray.get(i);
            remove_view.setVisibility(View.GONE);
        }
        currentViewsArray.clear();
    }

    // This is a wrapper function to remove last icon added
    private void removeOneCurrentViewArray(){
        if(currentViewsArray.size() > 0){
            View remove_view = currentViewsArray.get(currentViewsArray.size() - 1);
            currentViewsArray.remove(currentViewsArray.size() - 1);
            remove_view.setVisibility(View.GONE);
            currentOrderArray.remove(currentOrderArray.size() - 1);
        }
    }

    // This is a wrapper function to remove last path added
    private void removeLastPath(){
        myCanvas.removePath(fingerID);
        if (fingerID > 0) {
            fingerID--;
        }
        currentOrderArray.remove(currentOrderArray.size() - 1);
    }

    // This determines which was last; Path or Icon
    // Path = 0 value
    // Icon = 1 value
    private void removeLastDrawn(){
        Log.d(TAG,"removeLastDrawn currentOrderArray.Size() = " + currentOrderArray.size());
        if(currentOrderArray.size() > 0) {
            if(Objects.equals(currentOrderArray.get(currentOrderArray.size()-1), 0)){ // If 0; Then last drawn was a path
                removeLastPath();
            }
            else{ // If 1; then last drawn was a icon
                removeOneCurrentViewArray();
            }
        }
    }

    // This handles if the user presses the back button;  Without this when pressed app will crash
    @Override
    public void onBackPressed() {
        clearCurrentArrays(); // Clearing current arrays
        Intent goToMainActivity = new Intent();
        goToMainActivity.putExtra("PictureDone", "Completed");
        setResult(RESULT_OK, goToMainActivity);
        finish();
        super.onBackPressed();
    }

    // This restores the current values of important local variables
    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        layoutHeight = savedInstanceState.getInt(CURRENT_DISPLAY_HEIGHT);
        layoutWidth = savedInstanceState.getInt(CURRENT_DISPLAY_WIDTH);
        currentOrderArray = savedInstanceState.getIntegerArrayList(CURRENT_ORDER_ARRAYLIST);
        pathID = savedInstanceState.getInt(CURRENT_PATHID);
        fingerID = savedInstanceState.getInt(CURRENT_FINGERID);
        mCurrentPhotoPath = savedInstanceState.getString(CURRENT_PHOTO_PATH);
        super.onRestoreInstanceState(savedInstanceState);
    }

    // This saves the current values of important local variables
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        outState.putInt(CURRENT_DISPLAY_HEIGHT, layoutHeight);
        outState.putInt(CURRENT_DISPLAY_WIDTH, layoutWidth);
        outState.putIntegerArrayList(CURRENT_ORDER_ARRAYLIST, currentOrderArray);
        outState.putInt(CURRENT_PATHID, pathID);
        outState.putInt(CURRENT_FINGERID, fingerID);
        outState.putString(CURRENT_PHOTO_PATH, mCurrentPhotoPath);
        super.onSaveInstanceState(outState);
    }
}
